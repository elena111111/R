for(i in 1:l) {
if(Xl$Species[i] == classes[1]) {y[i] <- -1}
#else {y[i] <- 1}
}
#Xl <- data.frame(Xl, y)
#print(Xl)
Q <- 0
for(i in 1:l)
Q <- Q + major(y[i]*ScalarProduct(w, Xl[i, 1:2]))
print(Q)
Q_new <- 0
w_new <- c()
w_new[1:l] <- 0
while(abs(Q - Q_new) >= 0.5 && !eq(w, w_new)){
Q_new <- Q
w_new <- w
rand <- sample(1:l, 1, replace = T)
print(rand)
m <- y[rand]*ScalarProduct(w, Xl[rand, 1:2])
e <- major(m)
w <- w - eta * dQ(m) * Xl[rand, 1:2] * y[rand]
print("w:")
print(w)
Q <- (1 - lambda)*Q + lambda*e
print("Q:")
print(Q)
}
return(w)
}
classes <- c("versicolor", "virginica")
X <- iris[iris$Species == classes[1]  | iris$Species == classes[2], ]
colors <- c("setosa" = "red", "versicolor" = "green3", "virginica" = "blue")
plot(X[, 3:4], pch = 21, bg = "lightgoldenrodyellow", col = colors[X$Species])
points(S[, 3:4], pch = 21, bg = colors[S$Species], col = colors[S$Species])
eta <- 0.001
lambda <- 0.01
major <- Q_major
w <- sg(S[, 3:5], eta, lambda, classes, major)
print(w)
x <- c(min(iris[, 4]), max(iris[, 4]))
print(x)
y <- c(-w[2]*x[2]/w[1], -w[1]*x[1]/w[2])
print(y)
y1 <- c(y[[1]], y[[2]])
#lines(x, y, pch = 8, bg = "black", col = "gray")
fit <- lm(y1~x)
abline(fit)
legend("bottomright", c("virginica", "versicolor", "setosa"), pch = c(15,15,15), col = c("blue", "green3", "red"))
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
#source('E:/R_git/R/stolp/stolp.R')
Q_major <- function(M){
return((1 - M)^2)
}
dQ <- function(M){
return(2*M - 2)
}
V_major <- function(M){
if((1 - M) > 0) return(1 - M)
else return(0)
}
dV <- function(M){
if(M > 0) return(-1)
else return(0)
}
S_major <- function(M){
return(2/(1 + exp(M)))
}
dS <- function(M){
return(- 2*exp(M) / (1 + exp(M)))
}
L_major <- function(M){
return(log2(1 + exp(-M)))
}
dL <- function(M){
return(- exp(-M) / (log(2)*(1 + exp(-M))))
}
E_major <- function(M){
return(exp(-M))
}
dE <- function(M){
return(- exp(-M))
}
ScalarProduct <- function(a, b){
return(sum(a*b))
}
eq <- function(c1, c2){
if(length(c1) != length(c2)) return(FALSE)
for(i in 1:length(c1)){
if(c1[i] != c2[i]) return(FALSE)
}
return(TRUE)
}
sg <- function(Xl, eta, lambda, classes, major){  #для двух классов c 2 признаками
rownames(Xl) <- 1:nrow(Xl)
l <- nrow(Xl)
n <- ncol(Xl) - 1
w <- runif(n, -1 / (2*n), 1 / (2*n))
print(w)
y <- c()
y [1:l] <- 1
for(i in 1:l) {
if(Xl$Species[i] == classes[1]) {y[i] <- -1}
#else {y[i] <- 1}
}
#Xl <- data.frame(Xl, y)
#print(Xl)
Q <- 0
for(i in 1:l)
Q <- Q + major(y[i]*ScalarProduct(w, Xl[i, 1:2]))
print(Q)
Q_new <- 0
w_new <- c()
w_new[1:l] <- 0
while(abs(Q - Q_new) >= 0.1 && !eq(w, w_new)){
Q_new <- Q
w_new <- w
rand <- sample(1:l, 1, replace = T)
print(rand)
m <- y[rand]*ScalarProduct(w, Xl[rand, 1:2])
e <- major(m)
w <- w - eta * dQ(m) * Xl[rand, 1:2] * y[rand]
print("w:")
print(w)
Q <- (1 - lambda)*Q + lambda*e
print("Q:")
print(Q)
}
return(w)
}
classes <- c("setosa", "virginica")
X <- iris[iris$Species == classes[1]  | iris$Species == classes[2], ]
colors <- c("setosa" = "red", "versicolor" = "green3", "virginica" = "blue")
plot(X[, 3:4], pch = 21, bg = colors[X$Species], col = colors[X$Species])
#points(S[, 3:4], pch = 21, bg = colors[S$Species], col = colors[S$Species])
eta <- 0.001
lambda <- 0.01
major <- Q_major
w <- sg(X[, 3:5], eta, lambda, classes, major)
print(w)
x <- c(min(iris[, 4]), max(iris[, 4]))
print(x)
y <- c(-w[2]*x[2]/w[1], -w[1]*x[1]/w[2])
print(y)
y1 <- c(y[[1]], y[[2]])
#lines(x, y, pch = 8, bg = "black", col = "gray")
fit <- lm(y1~x)
abline(fit)
legend("bottomright", c("virginica", "versicolor", "setosa"), pch = c(15,15,15), col = c("blue", "green3", "red"))
st3 <- seq(from = min(iris[, 3]), to = max(iris[, 3]), by = step)
st4 <- seq(from = min(iris[, 4]), to = max(iris[, 4]), by = step)
st3 <- seq(from = min(X[, 3]), to = max(X[, 3]), by = 0.1)
st4 <- seq(from = min(X[, 4]), to = max(X[, 4]), by = 0.1)
for(i in st3){
for(j in st4){
z <- c(i, j)
if(ScalarProduct(w, z) < 0)
points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "red")
else points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "blue")
}
}
points(X[, 3:4], pch = 21, bg = colors[X$Species], col = colors[X$Species])
legend("bottomright", c("virginica", "versicolor", "setosa"), pch = c(15,15,15), col = c("blue", "green3", "red"))
for(i in st3){
for(j in st4){
z <- c(i, j)
print(z)
print(ScalarProduct(w, z))
if(ScalarProduct(w, z) < 0)
points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "red")
else points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "blue")
}
}
source('E:/1тну ПМИ/4к/смпр/sg.R')
w
source('E:/1тну ПМИ/4к/смпр/sg.R')
w
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
w
w <- c(-w[1], w[2])
for(i in st3){
for(j in st4){
z <- c(i, j)
print(z)
print(ScalarProduct(w, z))
if(ScalarProduct(w, z) < 0)
points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "red")
else points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "blue")
}
}
points(X[, 3:4], pch = 21, bg = colors[X$Species], col = colors[X$Species])
legend("bottomright", c("virginica", "versicolor", "setosa"), pch = c(15,15,15), col = c("blue", "green3", "red"))
w
w <- c(w[[1]], w[[2]])
w
for(i in st3){
for(j in st4){
z <- c(i, j)
print(z)
print(ScalarProduct(w, z))
if(ScalarProduct(w, z) < 0)
points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "red")
else points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "blue")
}
}
points(X[, 3:4], pch = 21, bg = colors[X$Species], col = colors[X$Species])
legend("bottomright", c("virginica", "versicolor", "setosa"), pch = c(15,15,15), col = c("blue", "green3", "red"))
w
source('E:/1тну ПМИ/4к/смпр/sg.R')
w
w <- c(-2, 0.1)
for(i in st3){
for(j in st4){
z <- c(i, j)
print(z)
print(ScalarProduct(w, z))
if(ScalarProduct(w, z) < 0)
points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "red")
else points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "blue")
}
}
points(X[, 3:4], pch = 21, bg = colors[X$Species], col = colors[X$Species])
legend("bottomright", c("virginica", "versicolor", "setosa"), pch = c(15,15,15), col = c("blue", "green3", "red"))
w <- c(-0.5, 0.5)
for(i in st3){
for(j in st4){
z <- c(i, j)
print(z)
print(ScalarProduct(w, z))
if(ScalarProduct(w, z) < 0)
points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "red")
else points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "blue")
}
}
points(X[, 3:4], pch = 21, bg = colors[X$Species], col = colors[X$Species])
legend("bottomright", c("virginica", "versicolor", "setosa"), pch = c(15,15,15), col = c("blue", "green3", "red"))
w
w <- c(-0.7, 0.7)
for(i in st3){
for(j in st4){
z <- c(i, j)
print(z)
print(ScalarProduct(w, z))
if(ScalarProduct(w, z) < 0)
points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "red")
else points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "blue")
}
}
points(X[, 3:4], pch = 21, bg = colors[X$Species], col = colors[X$Species])
legend("bottomright", c("virginica", "versicolor", "setosa"), pch = c(15,15,15), col = c("blue", "green3", "red"))
w <- c(0.7, -0.7)
for(i in st3){
for(j in st4){
z <- c(i, j)
print(z)
print(ScalarProduct(w, z))
if(ScalarProduct(w, z) < 0)
points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "red")
else points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "blue")
}
}
points(X[, 3:4], pch = 21, bg = colors[X$Species], col = colors[X$Species])
legend("bottomright", c("virginica", "versicolor", "setosa"), pch = c(15,15,15), col = c("blue", "green3", "red"))
w <- c(1, -0.7)
for(i in st3){
for(j in st4){
z <- c(i, j)
print(z)
print(ScalarProduct(w, z))
if(ScalarProduct(w, z) < 0)
points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "red")
else points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "blue")
}
}
points(X[, 3:4], pch = 21, bg = colors[X$Species], col = colors[X$Species])
legend("bottomright", c("virginica", "versicolor", "setosa"), pch = c(15,15,15), col = c("blue", "green3", "red"))
w <- c(0.3, -0.7)
for(i in st3){
for(j in st4){
z <- c(i, j)
print(z)
print(ScalarProduct(w, z))
if(ScalarProduct(w, z) < 0)
points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "red")
else points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "blue")
}
}
points(X[, 3:4], pch = 21, bg = colors[X$Species], col = colors[X$Species])
legend("bottomright", c("virginica", "versicolor", "setosa"), pch = c(15,15,15), col = c("blue", "green3", "red"))
w <- c(0.3, -0.8)
for(i in st3){
for(j in st4){
z <- c(i, j)
print(z)
print(ScalarProduct(w, z))
if(ScalarProduct(w, z) < 0)
points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "red")
else points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "blue")
}
}
points(X[, 3:4], pch = 21, bg = colors[X$Species], col = colors[X$Species])
legend("bottomright", c("virginica", "versicolor", "setosa"), pch = c(15,15,15), col = c("blue", "green3", "red"))
w <- c(0.4, -0.8)
for(i in st3){
for(j in st4){
z <- c(i, j)
print(z)
print(ScalarProduct(w, z))
if(ScalarProduct(w, z) < 0)
points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "red")
else points(z[1], z[2], pch = 21, bg = "lightgoldenrodyellow", col = "blue")
}
}
points(X[, 3:4], pch = 21, bg = colors[X$Species], col = colors[X$Species])
legend("bottomright", c("virginica", "versicolor", "setosa"), pch = c(15,15,15), col = c("blue", "green3", "red"))
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
x*y1
ScalarProduct(x, y1)
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
source('E:/1тну ПМИ/4к/смпр/sg.R')
